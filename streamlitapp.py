import os
import cv2
import dotenv
import streamlit as st
import numpy as np
import pandas as pd
import tf_keras
import tensorflow as tf
import sklearn
import joblib
from PIL import Image
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from tf_keras.models import load_model
from tf_keras.preprocessing.image import img_to_array
import google.generativeai as genai
import warnings
warnings.filterwarnings("ignore")

dotenv.load_dotenv()
GOOGLE_API_KEY = os.getenv('Google_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

gen_model = genai.GenerativeModel('gemini-1.5-flash',
                                 generation_config=genai.GenerationConfig(
                                    max_output_tokens=2000,temperature=0.4))

CLASS_MAPPING = {0: "Benign", 1: "Malignant", 2: "Normal"}
def preprocess_image(image, target_size = (224, 224)):
    image = cv2.resize(image, target_size)
    image = image / 255.0
    image = np.expand_dims(image, axis = -1)
    return np.expand_dims(image, axis = 0)

def models():
    CAE_model = load_model("C:\\Users\\Viraj Sawant\\Desktop\\GENAICANCER\\autoencoder_model.h5")
    SEGNET_model = load_model("C:\\Users\\Viraj Sawant\\Desktop\\GENAICANCER\\segnet_model.h5")
    birads_model = joblib.load("C:\\Users\\Viraj Sawant\\Desktop\\GENAICANCER\\birads_regressor_model.pkl")
    class_model = joblib.load("C:\\Users\\Viraj Sawant\\Desktop\\GENAICANCER\\cancer_classification_model.pkl")

    ohe_encoder = joblib.load("C:\\Users\\Viraj Sawant\\Desktop\\GENAICANCER\\cat_encoder1.pkl")

    return CAE_model, SEGNET_model, birads_model, class_model, ohe_encoder


def encode_params_ohe_le(params, ohe_encoder):
    ohe_features = params   
    ohe_df = pd.DataFrame([ohe_features], columns=['Tissue_composition','Signs','Symptoms','Shape','Margin','Echogenicity','Posterior_features','Halo','Calcifications','Skin_thickening'])
    encoded_ohe = ohe_encoder.transform(ohe_df) 

    return encoded_ohe


def predict_birads_cancer(combined_features, birads_model, cancer_model):
    birads_prediction = birads_model.predict(combined_features)
    cancer_prediction = cancer_model.predict(combined_features)

    cancer_class_name = CLASS_MAPPING.get(int(cancer_prediction[0]), "Unknown")
    return birads_prediction[0],cancer_class_name

def generate_medical_report(input_data):
    disclaimer = (
        "Disclaimer: The information provided below is generated by an AI system and is "
        "for informational purposes only. This is not a medical diagnosis, and it is "
        "crucial to consult with a healthcare professional for any medical concerns or "
        "advice."
    )
    findings = (
        f"Based on the information provided:\n"
        f"- Patient Age: {input_data['Age']}\n"
        f"- Pixel Size: {input_data['Pixel Size']}\n"
        f"- Tissue Composition: {input_data['Tissue Composition']}\n"
        f"- Signs: {input_data['Signs']}\n"
        f"- Symptoms: {input_data['Symptoms']}\n"
        f"- Tumor Shape: {input_data['Shape']}\n"
        f"- Margin: {input_data['Margin']}\n"
        f"- Echogenicity: {input_data['Echogenicity']}\n"
        f"- Posterior Features: {input_data['Posterior Features']}\n"
        f"- Calcifications: {input_data['Calcifications']}\n"
        f"- Skin Thickening: {input_data['Skin Thickening']}\n"
        f"\n"
        f"BIRADS Prediction (AI-based estimation): {input_data['BIRADS Prediction']}\n"
        f"Cancer Prediction (AI-based estimation): {input_data['Cancer Prediction']}\n"
    )
    cancer_type = input_data['Cancer Prediction']
    birads_level = input_data['BIRADS Prediction']
    
    if birads_level <= 2:
        recommendation = (
            "The BIRADS score suggests that the findings are likely benign. "
            "It is recommended to follow up with regular screening as per the guidance of your healthcare provider."
        )
    elif 3 <= birads_level <= 4:
        recommendation = (
            f"The BIRADS score of {birads_level} suggests the need for additional diagnostic tests. "
            f"While the {cancer_type} prediction indicates {cancer_type}, further imaging such as a mammogram or biopsy may be required."
        )
    else:
        recommendation = (
            f"The BIRADS score of {birads_level} suggests that the ultrasound image provided and data depicts {cancer_type}. "
            f"The {cancer_type} prediction suggests the possibility of {cancer_type}."
        )

    suggestions = (
        f"\n{recommendation}\n"
        "Please consult with a medical professional for a thorough examination and to interpret these findings accurately."
    )

    full_report = f"{disclaimer}\n\n{findings}\n\n{suggestions}"

    return full_report


def predict_mask(image, model, threshold=0.5):
    predicted_mask = model.predict(image)
    binary_mask = (predicted_mask > threshold).astype(np.uint8)
    white_pixel_count = np.sum(binary_mask)
    total_pixel_count = binary_mask.size
    white_pixel_ratio = white_pixel_count / total_pixel_count
    cancer_threshold = 0.04

    if white_pixel_ratio > cancer_threshold:
        st.write("Cancerous region detected.")
        return predicted_mask, True
    else:
        st.write("No significant cancerous region detected.")
        return predicted_mask, False


def main():
    st.title("BreastGuard AI")
    CAE_model, SEGNET_model, birads_model, cancer_model, ohe_encoder = models()
    if 'sidebar_data' not in st.session_state:
        st.session_state.sidebar_data = {
            'Age': 50,
            'Pixel Size': 0.0,
            'Tissue Composition': 'not available',
            'Signs': 'not available',
            'Symptoms': 'not available',
            'Shape': 'not applicable',
            'Margin': 'not applicable',
            'Echogenicity': 'not applicable',
            'Posterior Features': 'not applicable',
            'Halo': 'not applicable',
            'Calcifications': 'not applicable',
            'Skin Thickening': 'no',
        }

    st.sidebar.header("Enter the patient's details below.")
    st.session_state.sidebar_data['Age'] = st.sidebar.slider(
        "Age", 20, 90, value=st.session_state.sidebar_data['Age']
    )
    st.session_state.sidebar_data['Pixel Size'] = st.sidebar.number_input(
        "Pixel Size", min_value=0.0, format="%.2f", value=st.session_state.sidebar_data['Pixel Size']
    )
    st.session_state.sidebar_data['Tissue Composition'] = st.sidebar.selectbox(
        "Tissue Composition",
        [
            'heterogeneous: predominantly fat', 'homogeneous: fat', 'homogeneous: fibroglandular',
            'heterogeneous: predominantly fibroglandular', 'not available', 'lactating',
            'lactating&homogeneous: fibroglandular', 'lactating&heterogeneous: predominantly fibroglandular',
            'lactating&heterogeneous: predominantly fat'
        ],
        index=[
            'heterogeneous: predominantly fat', 'homogeneous: fat', 'homogeneous: fibroglandular',
            'heterogeneous: predominantly fibroglandular', 'not available', 'lactating',
            'lactating&homogeneous: fibroglandular', 'lactating&heterogeneous: predominantly fibroglandular',
            'lactating&heterogeneous: predominantly fat'
        ].index(st.session_state.sidebar_data['Tissue Composition'])
    )
    st.session_state.sidebar_data['Signs'] = st.sidebar.selectbox(
        "Signs",
        [
            'breast scar', 'not available', 'no', 'nipple retraction&palpable', 'palpable',
            'breast scar&skin retraction', 'nipple retraction', 'skin retraction&palpable',
            'peau d`orange&palpable', 'warmth&palpable', 'redness&warmth&palpable',
            'redness&warmth', 'palpable&breast scar'
        ],
        index=[
            'breast scar', 'not available', 'no', 'nipple retraction&palpable', 'palpable',
            'breast scar&skin retraction', 'nipple retraction', 'skin retraction&palpable',
            'peau d`orange&palpable', 'warmth&palpable', 'redness&warmth&palpable',
            'redness&warmth', 'palpable&breast scar'
        ].index(st.session_state.sidebar_data['Signs'])
    )
    st.session_state.sidebar_data['Symptoms'] = st.sidebar.selectbox(
        "Symptoms",
        [
            'family history of breast/ovarian cancer', 'not available', 'nipple discharge', 'no',
            'HRT/hormonal contraception', 'family history of breast/ovarian cancer&HRT/hormonal contraception',
            'personal history of breast cancer', 'personal history of breast cancer&family history of breast/ovarian cancer',
            'nipple discharge&family history of breast/ovarian cancer', 'breast injury'
        ],
        index=[
            'family history of breast/ovarian cancer', 'not available', 'nipple discharge', 'no',
            'HRT/hormonal contraception', 'family history of breast/ovarian cancer&HRT/hormonal contraception',
            'personal history of breast cancer', 'personal history of breast cancer&family history of breast/ovarian cancer',
            'nipple discharge&family history of breast/ovarian cancer', 'breast injury'
        ].index(st.session_state.sidebar_data['Symptoms'])
    )
    st.session_state.sidebar_data['Shape'] = st.sidebar.selectbox(
        "Tumor Shape", ['irregular', 'oval', 'round', 'not applicable'],
        index=['irregular', 'oval', 'round', 'not applicable'].index(st.session_state.sidebar_data['Shape'])
    )
    st.session_state.sidebar_data['Margin'] = st.sidebar.selectbox(
        "Margin",
        [
            'not circumscribed - indistinct', 'circumscribed', 'not circumscribed - spiculated&indistinct',
            'not circumscribed - spiculated&angular&indistinct', 'not circumscribed - microlobulated',
            'not circumscribed - angular&indistinct', 'not circumscribed - spiculated&angular',
            'not circumscribed - angular', 'not applicable',
            'not circumscribed - spiculated&microlobulated&indistinct',
            'not circumscribed - angular&microlobulated&indistinct',
            'not circumscribed - microlobulated&indistinct', 'not circumscribed - spiculated',
            'not circumscribed - angular&microlobulated', 'not circumscribed - spiculated&angular&microlobulated&indistinct'
        ],
        index=[
            'not circumscribed - indistinct', 'circumscribed', 'not circumscribed - spiculated&indistinct',
            'not circumscribed - spiculated&angular&indistinct', 'not circumscribed - microlobulated',
            'not circumscribed - angular&indistinct', 'not circumscribed - spiculated&angular',
            'not circumscribed - angular', 'not applicable',
            'not circumscribed - spiculated&microlobulated&indistinct',
            'not circumscribed - angular&microlobulated&indistinct',
            'not circumscribed - microlobulated&indistinct', 'not circumscribed - spiculated',
            'not circumscribed - angular&microlobulated', 'not circumscribed - spiculated&angular&microlobulated&indistinct'
        ].index(st.session_state.sidebar_data['Margin'])
    )
    st.session_state.sidebar_data['Echogenicity'] = st.sidebar.selectbox(
        "Echogenicity", ['heterogeneous', 'hypoechoic', 'hyperechoic', 'complex cystic/solid', 'isoechoic', 'anechoic', 'not applicable'],
        index=['heterogeneous', 'hypoechoic', 'hyperechoic', 'complex cystic/solid', 'isoechoic', 'anechoic', 'not applicable'].index(st.session_state.sidebar_data['Echogenicity'])
    )
    st.session_state.sidebar_data['Posterior Features'] = st.sidebar.selectbox(
        "Posterior_features", ['shadowing', 'no', 'enhancement', 'combined', 'not applicable'],
        index=['shadowing', 'no', 'enhancement', 'combined', 'not applicable'].index(st.session_state.sidebar_data['Posterior Features'])
    )
    st.session_state.sidebar_data['Halo'] = st.sidebar.selectbox(
        "Halo", ['no', 'yes', 'not applicable'],
        index=['no', 'yes', 'not applicable'].index(st.session_state.sidebar_data['Halo'])
    )
    st.session_state.sidebar_data['Calcifications'] = st.sidebar.selectbox(
        "Calcifications", ['no', 'intraductal', 'in a mass', 'not applicable', 'indefinable'],
        index=['no', 'intraductal', 'in a mass', 'not applicable', 'indefinable'].index(st.session_state.sidebar_data['Calcifications'])
    )
    st.session_state.sidebar_data['Skin Thickening'] = st.sidebar.selectbox(
        "Skin_thickening", ['yes', 'no'],
        index=['yes', 'no'].index(st.session_state.sidebar_data['Skin Thickening'])
    )

    # File Uploader
    input_file = st.file_uploader("Upload the Ultrasound Image of Breast", type=["png", "jpg", "jpeg"])

    if input_file is not None:
        if 'uploaded_file' not in st.session_state or st.session_state['uploaded_file'] != input_file:
            st.session_state['uploaded_file'] = input_file

            file_bytes = np.asarray(bytearray(input_file.read()), dtype=np.uint8)
            image = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE)
            st.image(image, caption="Uploaded Ultrasound Image", use_column_width=True)

            preprocessed_image = preprocess_image(image=image)
            st.session_state['preprocessed_image'] = preprocessed_image

            CAE_features = CAE_model.predict(preprocessed_image)
            image_features_flat = CAE_features.reshape(CAE_features.shape[0], -1)
            st.session_state['image_features_flat'] = image_features_flat

            mask, is_cancer_detected = predict_mask(preprocessed_image, SEGNET_model)
            st.caption(f"Mask shape: {mask.shape}")
            st.image(mask[0], caption="Masked Ultrasound Image", use_column_width=True)
            st.session_state['is_cancer_detected'] = is_cancer_detected
        else:
            preprocessed_image = st.session_state['preprocessed_image']
            image_features_flat = st.session_state['image_features_flat']
            is_cancer_detected = st.session_state['is_cancer_detected']

        if not is_cancer_detected:
            if st.button("Do you want to continue with further processing?"):
                pass
            else:
                return
        params = [
            st.session_state.sidebar_data['Tissue Composition'],
            st.session_state.sidebar_data['Signs'],
            st.session_state.sidebar_data['Symptoms'],
            st.session_state.sidebar_data['Shape'],
            st.session_state.sidebar_data['Margin'],
            st.session_state.sidebar_data['Echogenicity'],
            st.session_state.sidebar_data['Posterior Features'],
            st.session_state.sidebar_data['Halo'],
            st.session_state.sidebar_data['Calcifications'],
            st.session_state.sidebar_data['Skin Thickening']
        ]

        encoded_params = encode_params_ohe_le(params, ohe_encoder)
        numerical_features = np.array([[st.session_state.sidebar_data['Pixel Size'], st.session_state.sidebar_data['Age']]])
        combined_features = np.concatenate((image_features_flat, numerical_features, encoded_params), axis=1)

        birads_prediction, cancer_prediction = predict_birads_cancer(combined_features, birads_model, cancer_model)

        input_data = {
            "Age": st.session_state.sidebar_data['Age'],
            "Pixel Size": st.session_state.sidebar_data['Pixel Size'],
            "Tissue Composition": st.session_state.sidebar_data['Tissue Composition'],
            "Signs": st.session_state.sidebar_data['Signs'],
            "Symptoms": st.session_state.sidebar_data['Symptoms'],
            "Shape": st.session_state.sidebar_data['Shape'],
            "Margin": st.session_state.sidebar_data['Margin'],
            "Echogenicity": st.session_state.sidebar_data['Echogenicity'],
            "Posterior Features": st.session_state.sidebar_data['Posterior Features'],
            "Halo": st.session_state.sidebar_data['Halo'],
            "Calcifications": st.session_state.sidebar_data['Calcifications'],
            "Skin Thickening": st.session_state.sidebar_data['Skin Thickening'],
            'BIRADS Prediction': birads_prediction,
            'Cancer Prediction': cancer_prediction
        }

        st.success(f"BIRADS Prediction: {birads_prediction:.2f}")

        gemini_report = generate_medical_report(input_data)
        st.header("Generated Medical Report")
        st.write(gemini_report)
    else:
        st.write("Please upload an image to proceed.")

if __name__ == "__main__":
    main()